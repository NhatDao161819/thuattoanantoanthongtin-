#include <stdio.h>
#include <math.h>
#include <stdbool.h>

// Hàm sàng nguyên thủy (Sieve of Eratosthenes)
void sieveOfEratosthenes(int max, bool isPrime[]) {
    for (int i = 0; i <= max; i++) {
        isPrime[i] = true;
    }
    isPrime[0] = isPrime[1] = false; // 0 và 1 không phải là số nguyên tố

    for (int p = 2; p * p <= max; p++) {
        if (isPrime[p]) {
            for (int i = p * p; i <= max; i += p) {
                isPrime[i] = false;
            }
        }
    }
}

// Hàm tìm số nguyên tố gần nhất với `num`
int findNearestPrime(int num, bool isPrime[], int max) {
    int lower = num, upper = num;

    while (lower > 1 || upper < max) {
        if (lower > 1 && isPrime[lower]) {
            return lower;
        }
        if (upper < max && isPrime[upper]) {
            return upper;
        }
        lower--;
        upper++;
    }

    return -1; // Không tìm thấy số nguyên tố trong phạm vi (không xảy ra với max đủ lớn)
}

int main() {
    long long int MSV, SBD, MSVd, MSVt, cduoi, ctren, check, done, b, k, a, n;
    int K[50]; // K không cần phải là long long int vì nó chỉ lưu giá trị 0 hoặc 1
    cduoi = ctren = 0;
    n = 123456;

    printf("Nhap MSV: "); scanf("%lld", &MSV);
    printf("Nhap SBD: "); scanf("%lld", &SBD);

    int max = 1000000; // Giới hạn cho sàng nguyên thủy
    bool isPrime[max + 1];
    sieveOfEratosthenes(max, isPrime);

    MSV = findNearestPrime(MSV, isPrime, max);
    k = MSV;
    a = SBD;
    b = 1;
    int j = 0;

    while (k > 0) {
        K[j] = k % 2;
        k = (k - K[j]) / 2;
        j++;
    }

    if (K[0] == 1) b = a;

    for (int i = 1; i < j; i++) {
        a = (a * a) % n;
        if (K[i] == 1) {
            b = (a * b) % n;
        }
    }

    printf(" %lld ^ %lld mod %lld = %lld\n", SBD, MSV, n, b);

    return 0;
}
